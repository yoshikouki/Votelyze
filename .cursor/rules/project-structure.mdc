---
description:
globs:
alwaysApply: false
---
# Project Structure Guide

This is a Next.js project with TypeScript, using Vitest for testing and Biome for code quality. The project follows a "Package by Feature" architecture.

## Package by Feature Architecture
The codebase is organized around business features rather than technical layers. This approach:
- Makes each feature self-contained with its own components, logic, and types
- Reduces coupling between features
- Makes the codebase more maintainable and scalable
- Facilitates parallel development

## Directory Structure
The source code is organized in the `src` directory with the following structure:

### App Router (`src/app/`)
- Next.js pages and layouts
- App-specific components tightly coupled with app structure
- Feature-specific routes in `[feature]/` directories
- Contains files like:
  - `layout.tsx` - Root layout with providers
  - `page.tsx` - Root page
  - `main-navigation.tsx` - App navigation

### Features (`src/features/`)
Each feature has its own directory containing:
- `components/` - Feature-specific components
- `lib/` - Feature-specific utilities and business logic
- `page.tsx` - Feature page component

### Shared Components (`src/components/`)
- Reusable UI components only
- Feature-agnostic (e.g., Button, Card)
- Should not contain business logic

### Shared Libraries (`src/lib/`)
- Shared utilities and configurations
- Database configurations and schema
- Helper functions used across features

## Key Configuration Files
- [vitest.config.ts](mdc:vitest.config.ts) - Test configuration with path aliases
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [next.config.ts](mdc:next.config.ts) - Next.js configuration
- [biome.json](mdc:biome.json) - Code quality and formatting rules

## File Naming Conventions
- React Components: kebab-case (e.g., `login-button.tsx`)
- Other files: kebab-case (e.g., `main-navigation.tsx`, `use-auth.ts`)
- Next.js special files: as per Next.js conventions (e.g., `layout.tsx`, `page.tsx`)

## Testing
Tests are configured to run in the following locations:
- Test files should be named `*.test.ts`
- Tests are included from: `src/**/*.test.ts`
- Node environment is set to "test" during test execution

## Path Aliases
The project uses TypeScript path aliases for cleaner imports:
- `@/*` maps to `src/*`
- Use absolute imports with `@/` prefix for non-relative imports
- Use relative imports for files within the same feature/module
